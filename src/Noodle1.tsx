/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'

type GLTFResult = GLTF & {
  nodes: {
    red_switch: THREE.Mesh
    round_disc: THREE.Mesh
    Cube_1: THREE.Mesh
    Cube_2: THREE.Mesh
    Cube_3: THREE.Mesh
    Cube_4: THREE.Mesh
    Cube_5: THREE.Mesh
    Cube_6: THREE.Mesh
    Cube_7: THREE.Mesh
    Cube_8: THREE.Mesh
    Cube_9: THREE.Mesh
  }
  materials: {
    s_Plastic: THREE.MeshPhysicalMaterial
    s_Chrome: THREE.MeshStandardMaterial
    Material: THREE.MeshStandardMaterial
    Chrome: THREE.MeshStandardMaterial
    Plastic: THREE.MeshStandardMaterial
    side1: THREE.MeshStandardMaterial
    side2: THREE.MeshStandardMaterial
    side3: THREE.MeshStandardMaterial
    side4: THREE.MeshStandardMaterial
  }
}

export default function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF('/noodle1_d.gltf') as GLTFResult
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.red_switch.geometry}
        material={nodes.red_switch.material}
        position={[0.7121842, 1, 0.6018183]}
        rotation={[Math.PI, -2e-7, Math.PI]}
        scale={[0.4272437, 0.4272437, 0.4272437]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.round_disc.geometry}
        material={nodes.round_disc.material}
        position={[0.960722, -0.3249993, 0.3517407]}
        rotation={[2.3565738, -5e-7, -Math.PI / 2]}
        scale={[0.3825755, 0.3825755, 0.3825755]}
      />
      <mesh castShadow receiveShadow geometry={nodes.Cube_1.geometry} material={materials.Material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_2.geometry} material={materials.Chrome} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_3.geometry} material={materials.Plastic} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_4.geometry} material={nodes.Cube_4.material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_5.geometry} material={nodes.Cube_5.material} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_6.geometry} material={materials.side1} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_7.geometry} material={materials.side2} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_8.geometry} material={materials.side3} />
      <mesh castShadow receiveShadow geometry={nodes.Cube_9.geometry} material={materials.side4} />
    </group>
  )
}

useGLTF.preload('/noodle1_d.gltf')
